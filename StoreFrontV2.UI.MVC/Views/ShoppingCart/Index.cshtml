@*@model IEnumerable<StoreFrontV2.UI.MVC.Models.CartItemViewModel>*@
@model Dictionary<int, StoreFrontV2.UI.MVC.Models.CartItemViewModel>

@{
    ViewBag.Title = "Shopping Cart";
}

<div class="content-section why-acme-sections wf-section" id="shop-header">
    <div class="container">
        <div class="about-top-block">
            <div class="why-acme-block">
                <h2>@ViewBag.Title</h2>
                <br />
                <p style="text-decoration:none">
                    @Html.ActionLink("Back to Shop", "Index", "Products", null, new { @class = "btn btn-info", @id = "backToShop" })
                </p>
            </div>
        </div>
    </div>
    <br />
</div>

@{
    decimal? cartTotal = 0;
    int totalCountOfItems = 0;
}
<div class="content-section why-acme-sections">
    <div>
        <div class="center-stuff">

            @if (Model.Count == 0)
            {
                <p class="table">
                    There are no items in your cart.
                </p>
            }
            else
            {
                foreach (var item in Model)
                {

                    <div class="card" style="width: 18rem;">
                        <img class="cartImage" src="~/Content/images/ProductImages/@item.Value.Product.ProdImage" alt="Picture of @item.Value.Product.ProductName" title="@item.Value.Product.ProductName" />
                        <div class="card-body">
                            <h5 class="card-title">@item.Value.Product.ProductName</h5>
                            <p class="card-text">Unit Price: <strong> @string.Format($"{item.Value.Product.UnitPrice:c}") </strong></p>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item update-quantity">
                                @using (Html.BeginForm("UpdateCart", "ShoppingCart", FormMethod.Post))
                                {
                                    @Html.Hidden("productID", item.Key)
                                    @Html.TextBox("qty", item.Value.Qty, new { @class = "quantity-show", style = "max-width: 25px; display: inline;" })
                                    <input type="submit" value="Update Qty" class="btn btn-info smallShop" /> @Html.ActionLink("x", "RemoveFromCart", new { id = item.Key }, htmlAttributes: new { id = "remove-btn" })
                                }

                            </li>
                            @{totalCountOfItems += item.Value.Qty;
                            }
                            <li class="list-group-item card-text">
                                @{
                                    //Calculate line total & update running total variable
                                    decimal? lineTotal = item.Value.Qty * item.Value.Product.UnitPrice;
                                    cartTotal += lineTotal;
                                }
                                Line Total: @string.Format($"{lineTotal:c}")
                            </li>
                        </ul>
                    </div>

                }
                <div class="clear"></div>
            }
        </div>
    </div>
</div>
<br />
<div class="w-col-12 cartTotal">
    <p class="cartText">
        You have @totalCountOfItems item@(totalCountOfItems == 1 ? "" : "s") in your cart.
        Your total before taxes and shipping is: @string.Format($"{cartTotal:c}")
    </p>
</div>
